# Generated by Django 4.2.13 on 2024-11-11 03:17

from django.db import migrations


def copytolocal(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Donor = apps.get_model('kronofoto', 'Donor')
    LocalDonorData = apps.get_model('kronofoto', 'LocalDonorData')
    for donor in Donor.objects.using(db_alias).all():
        if any([
            donor.email,
            donor.home_phone,
            donor.street1,
            donor.street2,
            donor.city,
            donor.state,
            donor.zip,
            donor.country,
        ]):
            data = LocalDonorData.objects.using(db_alias).create(
                email=donor.email,
                home_phone=donor.home_phone,
                street1=donor.street1,
                street2=donor.street2,
                city=donor.city,
                state=donor.state,
                zip=donor.zip,
                country=donor.country,
                donor=donor,
            )

def copytodonor(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Donor = apps.get_model('kronofoto', 'Donor')
    LocalDonorData = apps.get_model('kronofoto', 'LocalDonorData')
    for data in LocalDonorData.objects.using(db_alias).all():
        data.donor.email = data.email
        data.donor.home_phone = data.home_phone
        data.donor.street1 = data.street1
        data.donor.street2 = data.street2
        data.donor.city = data.city
        data.donor.state = data.state
        data.donor.zip = data.zip
        data.donor.country = data.country
        data.donor.save()

class Migration(migrations.Migration):

    dependencies = [
        ('kronofoto', '0129_donordatabase_localdonordata_remotedonordata'),
    ]

    operations = [
        migrations.RunPython(copytolocal, copytodonor),
    ]
